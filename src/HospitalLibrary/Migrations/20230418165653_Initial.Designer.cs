// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20230418165653_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<int>("AllergensId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientsId")
                        .HasColumnType("integer");

                    b.HasKey("AllergensId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Novi Sad",
                            Country = "Srbija",
                            Number = "12",
                            Street = "Dunavska 29"
                        },
                        new
                        {
                            Id = 2,
                            City = "Beograd",
                            Country = "Srbija",
                            Number = "10",
                            Street = "Beogradska"
                        },
                        new
                        {
                            Id = 3,
                            City = "Sremska Mitrovica",
                            Country = "Srbija",
                            Number = "15",
                            Street = "Skolska"
                        },
                        new
                        {
                            Id = 4,
                            City = "Gradska",
                            Country = "Srbija",
                            Number = "25",
                            Street = "Njegoseva"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Penicilin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sulfonamidi "
                        },
                        new
                        {
                            Id = 3,
                            Name = "Salicilna kiselina"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("Specialization")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Slobodan",
                            LastName = "Radulovic",
                            RoomId = 1,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Aleksa",
                            LastName = "Zindovic",
                            RoomId = 2,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Mica",
                            LastName = "Micic",
                            RoomId = 3,
                            Specialization = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Examinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            PatientId = 1,
                            RoomId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 3,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 12,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 16,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 18,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 21,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 22,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 23,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 24,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 25,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 26,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 27,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 28,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 29,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 30,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 31,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 32,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 33,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 34,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 35,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 36,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 37,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 38,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 39,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 40,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 41,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 42,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 43,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 44,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 45,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 46,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 47,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 48,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 49,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 50,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 51,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 52,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 53,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 54,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 55,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 56,
                            DoctorId = 1,
                            PatientId = 2,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 57,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 58,
                            DoctorId = 1,
                            PatientId = 4,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 59,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = true,
                            IsPublic = true,
                            PatientId = 1,
                            Status = 0,
                            Text = "Bolnica je dobra"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = false,
                            IsPublic = true,
                            PatientId = 2,
                            Status = 0,
                            Text = "Bolnica je losa"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = false,
                            IsPublic = true,
                            PatientId = 3,
                            Status = 1,
                            Text = "Bolnica je odlicna"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = true,
                            IsPublic = true,
                            PatientId = 4,
                            Status = 0,
                            Text = "Bolnica je solidna"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SelectedDoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            BloodType = 0,
                            Email = "peraperic@gmail.com",
                            FirstName = "Pera",
                            Gender = 0,
                            LastName = "Peric",
                            SelectedDoctorId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            BloodType = 7,
                            Email = "markomarkovic@gmail.com",
                            FirstName = "Marko",
                            Gender = 0,
                            LastName = "Markovic",
                            SelectedDoctorId = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            BloodType = 5,
                            Email = "dusanbaljinac@gmail.com",
                            FirstName = "Dusan",
                            Gender = 0,
                            LastName = "Baljinac",
                            SelectedDoctorId = 1,
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            BloodType = 3,
                            Email = "slobodanradulovic@gmail.com",
                            FirstName = "Slobodan",
                            Gender = 0,
                            LastName = "Radulovic",
                            SelectedDoctorId = 2,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Soba 12"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Soba 13 "
                        },
                        new
                        {
                            Id = 3,
                            Name = "Soba 14"
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.DateRange", "WorkHour", b1 =>
                        {
                            b1.Property<int>("DoctorId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");

                            b1.HasData(
                                new
                                {
                                    DoctorId = 1,
                                    End = new DateTime(2022, 12, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    DoctorId = 2,
                                    End = new DateTime(2022, 12, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    DoctorId = 3,
                                    End = new DateTime(2022, 12, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Room");

                    b.Navigation("WorkHour")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<int>("ExaminationId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ExaminationId");

                            b1.ToTable("Examinations");

                            b1.WithOwner()
                                .HasForeignKey("ExaminationId");

                            b1.HasData(
                                new
                                {
                                    ExaminationId = 1,
                                    End = new DateTime(2022, 12, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 2,
                                    End = new DateTime(2022, 12, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 3,
                                    End = new DateTime(2022, 12, 15, 12, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 4,
                                    End = new DateTime(2023, 1, 22, 8, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 22, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 5,
                                    End = new DateTime(2023, 2, 5, 9, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 2, 5, 9, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 6,
                                    End = new DateTime(2022, 12, 27, 7, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 27, 7, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 7,
                                    End = new DateTime(2022, 12, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 8,
                                    End = new DateTime(2023, 1, 23, 7, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 7, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 9,
                                    End = new DateTime(2023, 1, 23, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 7, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 10,
                                    End = new DateTime(2023, 1, 23, 8, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 11,
                                    End = new DateTime(2023, 1, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 8, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 12,
                                    End = new DateTime(2023, 1, 23, 9, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 9, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 13,
                                    End = new DateTime(2023, 1, 23, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 9, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 14,
                                    End = new DateTime(2023, 1, 23, 10, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 10, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 15,
                                    End = new DateTime(2023, 1, 23, 11, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 16,
                                    End = new DateTime(2023, 1, 23, 11, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 11, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 17,
                                    End = new DateTime(2023, 1, 23, 12, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 11, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 18,
                                    End = new DateTime(2023, 1, 23, 12, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 19,
                                    End = new DateTime(2023, 1, 23, 13, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 12, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 20,
                                    End = new DateTime(2023, 1, 23, 13, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 13, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 21,
                                    End = new DateTime(2023, 1, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 13, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 22,
                                    End = new DateTime(2023, 1, 23, 14, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 23,
                                    End = new DateTime(2023, 1, 23, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 14, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 24,
                                    End = new DateTime(2023, 1, 23, 15, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 15, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 25,
                                    End = new DateTime(2023, 1, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 15, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 26,
                                    End = new DateTime(2023, 1, 23, 16, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 16, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 27,
                                    End = new DateTime(2023, 1, 23, 17, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 16, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 28,
                                    End = new DateTime(2023, 1, 23, 17, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 17, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 29,
                                    End = new DateTime(2023, 1, 23, 18, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 17, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 30,
                                    End = new DateTime(2023, 1, 23, 18, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 18, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 31,
                                    End = new DateTime(2023, 1, 23, 19, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 18, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 32,
                                    End = new DateTime(2023, 1, 23, 19, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 19, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 33,
                                    End = new DateTime(2023, 1, 23, 20, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 23, 19, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 34,
                                    End = new DateTime(2023, 1, 24, 7, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 7, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 35,
                                    End = new DateTime(2023, 1, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 7, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 36,
                                    End = new DateTime(2023, 1, 24, 8, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 37,
                                    End = new DateTime(2023, 1, 24, 9, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 8, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 38,
                                    End = new DateTime(2023, 1, 24, 9, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 9, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 39,
                                    End = new DateTime(2023, 1, 24, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 9, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 40,
                                    End = new DateTime(2023, 1, 24, 10, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 10, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 41,
                                    End = new DateTime(2023, 1, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 42,
                                    End = new DateTime(2023, 1, 24, 11, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 11, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 43,
                                    End = new DateTime(2023, 1, 24, 12, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 11, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 44,
                                    End = new DateTime(2023, 1, 24, 12, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 45,
                                    End = new DateTime(2023, 1, 24, 13, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 12, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 46,
                                    End = new DateTime(2023, 1, 24, 13, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 13, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 47,
                                    End = new DateTime(2023, 1, 24, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 13, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 48,
                                    End = new DateTime(2023, 1, 24, 14, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 49,
                                    End = new DateTime(2023, 1, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 14, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 50,
                                    End = new DateTime(2023, 1, 24, 15, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 15, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 51,
                                    End = new DateTime(2023, 1, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 15, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 52,
                                    End = new DateTime(2023, 1, 24, 16, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 16, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 53,
                                    End = new DateTime(2023, 1, 24, 17, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 16, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 54,
                                    End = new DateTime(2023, 1, 24, 17, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 17, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 55,
                                    End = new DateTime(2023, 1, 24, 18, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 17, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 56,
                                    End = new DateTime(2023, 1, 24, 18, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 18, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 57,
                                    End = new DateTime(2023, 1, 24, 19, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 18, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 58,
                                    End = new DateTime(2023, 1, 24, 19, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 19, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 59,
                                    End = new DateTime(2023, 1, 24, 20, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 24, 19, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.FeedbackRating", "Rating", b1 =>
                        {
                            b1.Property<int>("FeedbackId")
                                .HasColumnType("integer");

                            b1.Property<int>("Rating")
                                .HasColumnType("integer");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("Feedbacks");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");

                            b1.HasData(
                                new
                                {
                                    FeedbackId = 1,
                                    Rating = 3
                                },
                                new
                                {
                                    FeedbackId = 2,
                                    Rating = 4
                                },
                                new
                                {
                                    FeedbackId = 3,
                                    Rating = 5
                                },
                                new
                                {
                                    FeedbackId = 4,
                                    Rating = 5
                                });
                        });

                    b.Navigation("Patient");

                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.Pin", "Pin", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.HasData(
                                new
                                {
                                    PatientId = 1,
                                    Value = "2201000120492"
                                },
                                new
                                {
                                    PatientId = 2,
                                    Value = "1412995012451"
                                },
                                new
                                {
                                    PatientId = 3,
                                    Value = "2008004124293"
                                },
                                new
                                {
                                    PatientId = 4,
                                    Value = "1111952020204"
                                });
                        });

                    b.Navigation("Address");

                    b.Navigation("Pin")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
